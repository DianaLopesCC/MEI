/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 17 23:20:27 GMT 2018
 */

package uMer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import uMer.Bike;
import uMer.Car;
import uMer.Helicopter;
import uMer.Trip;
import uMer.Van;
import uMer.Vehicle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vehicle_ESTest extends Vehicle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(")", (-1373.838), point2D_Double0, ")");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = MockLocalDate.ofEpochDay(0);
      int int0 = van0.moneyGeneratedBetween(localDate1, localDate0);
      assertEquals((-1373.838), van0.getReliable(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(0, int0);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertTrue(van0.isAvailable());
      assertEquals(1.9, van0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("s", 1.5, point2D_Double0, "xfPg");
      Point2D.Double point2D_Double1 = new Point2D.Double();
      helicopter0.addClient("xfPg", point2D_Double0, point2D_Double1);
      assertEquals(1.5, helicopter0.getReliable(), 0.01);
      assertEquals("xfPg", helicopter0.getOwner());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertTrue(helicopter0.isAvailable());
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals("s", helicopter0.getLicencePlate());
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("uMer.Van", 65.0, point2D_Double0, "\nFator de fiabilidade : ");
      bike0.setPosition(point2D_Double0);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals("uMer.Van", bike0.getLicencePlate());
      assertEquals("\nFator de fiabilidade : ", bike0.getOwner());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(65.0, bike0.getReliable(), 0.01);
      assertTrue(bike0.isAvailable());
      assertEquals(1, bike0.getSeats());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("uMer.Van", 65.0, point2D_Double0, "\nFator de fiabilidade : ");
      Double double0 = new Double(65.0);
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) (-1.0), double0, localDate0, "", "7/wqvKDzS|", "?*70q", 0, 0, point2D_Double0, (-1059.5), 0.0, (-1.0));
      bike0.addTrip(trip0);
      int int0 = bike0.moneyGeneratedBetween(localDate0, localDate0);
      assertTrue(bike0.isAvailable());
      assertEquals(1, bike0.getSeats());
      assertEquals("\nFator de fiabilidade : ", bike0.getOwner());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(65.0, bike0.getReliable(), 0.01);
      assertEquals("uMer.Van", bike0.getLicencePlate());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(3731.23, (-186.0));
      Van van0 = new Van("", 3731.23, point2D_Double0, "");
      assertTrue(van0.isAvailable());
      
      van0.setAvailable(false);
      boolean boolean0 = van0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Helicopter helicopter0 = new Helicopter("", 0.0, point2D_Double0, "");
      helicopter0.setSpeed(0.0);
      double double0 = helicopter0.getSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-636.42208909), (-636.42208909));
      Bike bike0 = new Bike("LjF^v", (-636.42208909), point2D_Double0, "]\nTempo previsto at\u00E9 ao cliente : ");
      bike0.setSpeed((-947.0));
      double double0 = bike0.getSpeed();
      assertEquals((-947.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(")", (-1373.838), point2D_Double0, ")");
      van0.setSeats(0);
      int int0 = van0.getSeats();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1533.9820129947177));
      Van van0 = new Van("", 0.0, point2D_Double0, "");
      van0.setSeats((-2891));
      int int0 = van0.getSeats();
      assertEquals((-2891), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Bike bike0 = new Bike("\nDist\u00E2ncia : ", 0.0, point2D_Double0, "\nDist\u00E2ncia : ");
      double double0 = bike0.getReliable();
      assertTrue(bike0.isAvailable());
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1501.00997343, 1501.00997343);
      Van van0 = new Van((String) null, (-89.44907306), point2D_Double0, (String) null);
      double double0 = van0.getReliable();
      assertEquals((-89.44907306), double0, 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertTrue(van0.isAvailable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1536.7046050426177), (-1536.7046050426177));
      Bike bike0 = new Bike("0?9U6MFa/Ptvf;", (-1536.7046050426177), point2D_Double0, "0?9U6MFa/Ptvf;");
      bike0.getQueue();
      assertEquals((-1536.7046050426177), bike0.getReliable(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertTrue(bike0.isAvailable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("\nPre\u00E7o estimado : ", 5010.068875622879, point2D_Double0, (String) null);
      car0.setPrice((-469.653859275202));
      double double0 = car0.getPrice();
      assertEquals((-469.653859275202), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("\nPre\u00E7o estimado : ", 5010.068875622879, point2D_Double0, (String) null);
      String string0 = car0.getOwner();
      assertTrue(car0.isAvailable());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertNull(string0);
      assertEquals(5010.068875622879, car0.getReliable(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Van van0 = new Van("", 0.0, point2D_Double0, "");
      van0.getOwner();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertTrue(van0.isAvailable());
      assertEquals(0.0, van0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("uMer.Van", 65.0, point2D_Double0, "\nFator de fiabilidade : ");
      String string0 = bike0.getLicencePlate();
      assertEquals("\nFator de fiabilidade : ", bike0.getOwner());
      assertEquals(1, bike0.getSeats());
      assertEquals("uMer.Van", string0);
      assertTrue(bike0.isAvailable());
      assertEquals(65.0, bike0.getReliable(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Car car0 = new Car("", 187.72966, point2D_Double0, "");
      car0.getLicencePlate();
      assertTrue(car0.isAvailable());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(4, car0.getSeats());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(187.72966, car0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("", 1.9, point2D_Double0, "");
      Van van1 = new Van((String) null, 1.9, point2D_Double0, "");
      boolean boolean0 = van0.equals((Vehicle) van1);
      assertFalse(boolean0);
      assertEquals(1.9, van1.getPrice(), 0.01);
      assertEquals(1.9, van1.getReliable(), 0.01);
      assertEquals(9, van1.getSeats());
      assertEquals(55.0, van1.getSpeed(), 0.01);
      assertTrue(van1.isAvailable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("lgL%bE3vA.pjYcd@", 0.0, point2D_Double0, "lgL%bE3vA.pjYcd@");
      Vehicle vehicle0 = helicopter0.clone();
      assertTrue(vehicle0.isAvailable());
      assertEquals(110.0, vehicle0.getSpeed(), 0.01);
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(8.5, vehicle0.getPrice(), 0.01);
      assertEquals(3, vehicle0.getSeats());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter(" ", (-1751.75549268503), point2D_Double0, "YyXVr,sec");
      Vehicle vehicle0 = helicopter0.clone();
      assertEquals((-1751.75549268503), helicopter0.getReliable(), 0.01);
      assertEquals("YyXVr,sec", vehicle0.getOwner());
      assertEquals(3, vehicle0.getSeats());
      assertEquals(" ", vehicle0.getLicencePlate());
      assertEquals(8.5, vehicle0.getPrice(), 0.01);
      assertTrue(vehicle0.isAvailable());
      assertEquals(110.0, vehicle0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("Dtw", 4055.070529, point2D_Double0, "Dtw");
      Vehicle vehicle0 = bike0.clone();
      assertEquals(0.9, vehicle0.getPrice(), 0.01);
      assertEquals(1, vehicle0.getSeats());
      assertEquals(4055.070529, bike0.getReliable(), 0.01);
      assertTrue(vehicle0.isAvailable());
      assertEquals(75.0, vehicle0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("\nEmail condutor : ", 752.772156037, point2D_Double0, "\nEmail condutor : ");
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = new HashMap<String, ArrayList<Point2D.Double>>();
      hashMap0.put("B~aT ZyoY", (ArrayList<Point2D.Double>) null);
      // Undeclared exception!
      try { 
        car0.setQueueInfo(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(")", (-1373.838), point2D_Double0, ")");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      LocalDate localDate0 = trip0.getDate();
      // Undeclared exception!
      try { 
        van0.moneyGeneratedBetween(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-2862.8199143406114), 2082.9);
      Van van0 = new Van((String) null, 2082.9, point2D_Double0, "z`5{bB)lE_x^");
      // Undeclared exception!
      try { 
        van0.equals((Vehicle) van0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("XN%>gQdo", 286.675915, point2D_Double0, "L");
      // Undeclared exception!
      try { 
        bike0.addTrip((Trip) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-636.42208909), (-636.42208909));
      Bike bike0 = new Bike("LjF^v", (-636.42208909), point2D_Double0, "]\nTempo previsto at\u00E9 ao cliente : ");
      String string0 = bike0.printQueue();
      assertEquals("]\nTempo previsto at\u00E9 ao cliente : ", bike0.getOwner());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals((-636.42208909), bike0.getReliable(), 0.01);
      assertEquals("LjF^v", bike0.getLicencePlate());
      assertEquals("Fila de espera vazia.", string0);
      assertTrue(bike0.isAvailable());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-806.09), (-786.6354049785));
      Car car0 = new Car("n:H_*g1wD%gZeWTW", 0.0, point2D_Double0, "n:H_*g1wD%gZeWTW");
      ArrayList<Trip> arrayList0 = car0.getTrips();
      Trip trip0 = new Trip();
      arrayList0.add(trip0);
      // Undeclared exception!
      try { 
        car0.setTrips(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-806.09), (-786.6354049785));
      Car car0 = new Car("n:H_*g1wD%gZeWTW", 0.0, point2D_Double0, "n:H_*g1wD%gZeWTW");
      ArrayList<Trip> arrayList0 = car0.getTrips();
      car0.setTrips(arrayList0);
      assertEquals(4, car0.getSeats());
      assertEquals(0.0, car0.getReliable(), 0.01);
      assertTrue(car0.isAvailable());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("lgL%bE3vA.pjYcd@", 0.0, point2D_Double0, "lgL%bE3vA.pjYcd@");
      helicopter0.setTrips((ArrayList<Trip>) null);
      assertTrue(helicopter0.isAvailable());
      assertEquals(3, helicopter0.getSeats());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(2261.3923, 881.8183505660918);
      Helicopter helicopter0 = new Helicopter("\nNumero de lugares: ", 881.8183505660918, point2D_Double0, "\nNumero de lugares: ");
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = (HashMap<String, ArrayList<Point2D.Double>>)helicopter0.getQueueInfo();
      ArrayList<Point2D.Double> arrayList0 = new ArrayList<Point2D.Double>();
      arrayList0.add(point2D_Double0);
      hashMap0.put("\n---------\nFila de Espera : \n", arrayList0);
      helicopter0.setQueueInfo(hashMap0);
      assertEquals(881.8183505660918, helicopter0.getReliable(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertTrue(helicopter0.isAvailable());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertEquals(3, helicopter0.getSeats());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Car car0 = new Car("Z=.@/", 0.0, point2D_Double0, "d ZDk3XM'/ jOS");
      car0.setQueueInfo((HashMap<String, ArrayList<Point2D.Double>>) null);
      assertEquals("Z=.@/", car0.getLicencePlate());
      assertEquals(4, car0.getSeats());
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals("d ZDk3XM'/ jOS", car0.getOwner());
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(0.0, car0.getReliable(), 0.01);
      assertTrue(car0.isAvailable());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      Bike bike0 = new Bike("\nDist\u00E2ncia : ", 0.0, point2D_Double0, "\nDist\u00E2ncia : ");
      bike0.setQueue((LinkedList<String>) null);
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertTrue(bike0.isAvailable());
      assertEquals(0.0, bike0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-636.42208909), (-636.42208909));
      Bike bike0 = new Bike("L*F1iv", (-636.42208909), point2D_Double0, "L*F1iv");
      bike0.addClient("L*F1iv", point2D_Double0, point2D_Double0);
      HashMap<String, ArrayList<Point2D.Double>> hashMap0 = (HashMap<String, ArrayList<Point2D.Double>>)bike0.getQueueInfo();
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertTrue(bike0.isAvailable());
      assertEquals(1, bike0.getSeats());
      assertFalse(hashMap0.isEmpty());
      assertEquals((-636.42208909), bike0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("uMer.Van", 65.0, point2D_Double0, "\nFator de fiabilidade : ");
      double double0 = bike0.getReliable();
      assertEquals(65.0, double0, 0.01);
      assertTrue(bike0.isAvailable());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(1, bike0.getSeats());
      assertEquals("\nFator de fiabilidade : ", bike0.getOwner());
      assertEquals("uMer.Van", bike0.getLicencePlate());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("Dtw", 4055.070529, point2D_Double0, "Dtw");
      bike0.getPosition();
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(4055.070529, bike0.getReliable(), 0.01);
      assertTrue(bike0.isAvailable());
      assertEquals(75.0, bike0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("uMer.Van", 65.0, point2D_Double0, "\nFator de fiabilidade : ");
      boolean boolean0 = bike0.isAvailable();
      assertTrue(boolean0);
      assertEquals(65.0, bike0.getReliable(), 0.01);
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals("\nFator de fiabilidade : ", bike0.getOwner());
      assertEquals(1, bike0.getSeats());
      assertEquals("uMer.Van", bike0.getLicencePlate());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(658.32, 658.32);
      Van van0 = new Van((String) null, 658.32, point2D_Double0, "");
      String string0 = van0.getLicencePlate();
      assertNull(string0);
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertTrue(van0.isAvailable());
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(658.32, van0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-806.09), (-786.6354049785));
      Car car0 = new Car("n:H_*g1wD%gZeWTW", 0.0, point2D_Double0, "n:H_*g1wD%gZeWTW");
      car0.setPrice(0.0);
      double double0 = car0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("o&+)", 2849.700302184699, point2D_Double0, "o&+)");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      LocalDate localDate0 = trip0.getDate();
      LocalDate localDate1 = MockLocalDate.now();
      int int0 = van0.moneyGeneratedBetween(localDate0, localDate1);
      assertTrue(van0.isAvailable());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(0, int0);
      assertEquals(2849.700302184699, van0.getReliable(), 0.01);
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(9, van0.getSeats());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1533.9820129947177));
      Bike bike0 = new Bike("", (-1533.9820129947177), point2D_Double0, "");
      bike0.addClient("", point2D_Double0, point2D_Double0);
      Van van0 = new Van("", 0.0, point2D_Double0, "");
      LinkedList<String> linkedList0 = bike0.getQueue();
      van0.setQueue(linkedList0);
      String string0 = van0.printQueue();
      assertEquals(0.0, van0.getReliable(), 0.01);
      assertEquals("1\u00BA lugar :\n", string0);
      assertTrue(van0.isAvailable());
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(")", (-1373.838), point2D_Double0, ")");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      // Undeclared exception!
      try { 
        van0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van(")", (-1373.838), point2D_Double0, ")");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      ArrayList<Trip> arrayList0 = van0.getTrips();
      assertTrue(van0.isAvailable());
      assertEquals((-1373.838), van0.getReliable(), 0.01);
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertEquals(9, van0.getSeats());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertTrue(arrayList0.contains(trip0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("XN%>gQdo", 286.675915, point2D_Double0, "L");
      bike0.removeClient("XN%>gQdo");
      assertEquals(1, bike0.getSeats());
      assertEquals(0.9, bike0.getPrice(), 0.01);
      assertTrue(bike0.isAvailable());
      assertEquals(286.675915, bike0.getReliable(), 0.01);
      assertEquals(75.0, bike0.getSpeed(), 0.01);
      assertEquals("L", bike0.getOwner());
      assertEquals("XN%>gQdo", bike0.getLicencePlate());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("", (-4777.623110976433), point2D_Double0, "");
      // Undeclared exception!
      try { 
        car0.addClient("", (Point2D.Double) null, point2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("lgL%bE3vA.pjYcd@", 0.0, point2D_Double0, "lgL%bE3vA.pjYcd@");
      helicopter0.equals((Vehicle) helicopter0);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(0.0, helicopter0.getReliable(), 0.01);
      assertEquals(110.0, helicopter0.getSpeed(), 0.01);
      assertTrue(helicopter0.isAvailable());
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("jO09yREvdW(2B2", (-1.0), point2D_Double0, (String) null);
      // Undeclared exception!
      try { 
        van0.setPosition((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Vehicle", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-806.09), (-786.6354049785));
      Car car0 = new Car("n:H_*g1wD%gZeWTW", 0.0, point2D_Double0, "n:H_*g1wD%gZeWTW");
      double double0 = car0.getPrice();
      assertEquals(4, car0.getSeats());
      assertEquals(0.0, car0.getReliable(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertTrue(car0.isAvailable());
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("lgL%bE3vA.pjYcd@", 0.0, point2D_Double0, "lgL%bE3vA.pjYcd@");
      String string0 = helicopter0.toString();
      assertEquals("Tipo : class uMer.Helicopter\nMatricula : lgL%bE3vA.pjYcd@\nVelocidade m\u00E9dia por km : 110.0\nPre\u00E7o m\u00E9dio por km : 8.5\nFator de fiabilidade : 0.0\nDisponibilidade : true\nNumero de lugares: 3\nPosi\u00E7\u00E3o : (0.0,0.0)\nOwner : lgL%bE3vA.pjYcd@\n---------\nFila de Espera : \nFila de espera vazia.\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Van van0 = new Van("o&+)", 2849.700302184699, point2D_Double0, "o&+)");
      int int0 = van0.getSeats();
      assertEquals(1.9, van0.getPrice(), 0.01);
      assertTrue(van0.isAvailable());
      assertEquals(55.0, van0.getSpeed(), 0.01);
      assertEquals(2849.700302184699, van0.getReliable(), 0.01);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(2261.3923, 881.8183505660918);
      Helicopter helicopter0 = new Helicopter("\nNumero de lugares: ", 881.8183505660918, point2D_Double0, "\nNumero de lugares: ");
      double double0 = helicopter0.getSpeed();
      assertEquals(8.5, helicopter0.getPrice(), 0.01);
      assertTrue(helicopter0.isAvailable());
      assertEquals(110.0, double0, 0.01);
      assertEquals(3, helicopter0.getSeats());
      assertEquals(881.8183505660918, helicopter0.getReliable(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter(" ", (-1751.75549268503), point2D_Double0, "YyXVr,sec");
      assertEquals(" ", helicopter0.getLicencePlate());
      
      helicopter0.setLicencePlate("YyXVr,sec");
      assertTrue(helicopter0.isAvailable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Bike bike0 = null;
      try {
        bike0 = new Bike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-806.09), (-786.6354049785));
      Car car0 = new Car("n:H_*g1wD%gZeWTW", 0.0, point2D_Double0, "n:H_*g1wD%gZeWTW");
      car0.setOwner("n:H_*g1wD%gZeWTW");
      assertTrue(car0.isAvailable());
      assertEquals(0.0, car0.getReliable(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertEquals(65.0, car0.getSpeed(), 0.01);
      assertEquals(4, car0.getSeats());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-806.09), (-786.6354049785));
      Car car0 = new Car("n:H_*g1wD%gZeWTW", 0.0, point2D_Double0, "n:H_*g1wD%gZeWTW");
      car0.getOwner();
      assertEquals(4, car0.getSeats());
      assertEquals(0.0, car0.getReliable(), 0.01);
      assertEquals(1.5, car0.getPrice(), 0.01);
      assertTrue(car0.isAvailable());
      assertEquals(65.0, car0.getSpeed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-806.09), (-786.6354049785));
      Car car0 = new Car("n:H_*g1wD%gZeWTW", 0.0, point2D_Double0, "n:H_*g1wD%gZeWTW");
      car0.setReliable((-1.0));
      assertEquals((-1.0), car0.getReliable(), 0.01);
  }
}
