/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 17 23:28:37 GMT 2018
 */

package uMer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;
import uMer.Trip;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trip_ESTest extends Trip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Double double0 = new Double((-6315.8227));
      assertNotNull(double0);
      assertEquals((-6315.8227), (double)double0, 0.01);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, double0, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-1780), trip0.getID());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      
      Double double1 = trip0.getTime();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-1780), trip0.getID());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-6315.8227), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1, (-1.0));
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "5w4U<#S", "N\u00E3o classificado", "", 1, (-1538.187812549418), point2D_Double0, 0.0, (-1538.187812549418), (-1538.187812549418));
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals((-1538.187812549418), trip0.getRealTimeToClient(), 0.01);
      assertEquals("N\u00E3o classificado", trip0.getDriver());
      assertEquals("5w4U<#S", trip0.getLicencePlate());
      assertEquals((-1538.187812549418), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals((-1538.187812549418), trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      Double double0 = trip0.getTime();
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertNotNull(double0);
      assertEquals((-1.0), trip0.getTime(), 0.01);
      assertEquals((-1538.187812549418), trip0.getRealTimeToClient(), 0.01);
      assertEquals("N\u00E3o classificado", trip0.getDriver());
      assertEquals("5w4U<#S", trip0.getLicencePlate());
      assertEquals((-1538.187812549418), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals((-1538.187812549418), trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3473));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3473), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, (String) null, (String) null, (String) null, (-3473), (-3473), point2D_Double0, (-3473), 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals((-3473.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-3473.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals((-3473), trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals((-3473), trip0.getID());
      
      double double0 = trip0.getRealTimeToClient();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-3473.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-3473.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getClient());
      assertEquals((-3473), trip0.getRating());
      assertNull(trip0.getLicencePlate());
      assertEquals((-3473), trip0.getID());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1, (-1.0));
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.y, localDate0, "5w4U<#S", "N\u00E3o classificado", "", 1, (-1538.187812549418), point2D_Double0, 0.0, (-1538.187812549418), (-1538.187812549418));
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals("N\u00E3o classificado", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1538.187812549418), trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals((-1538.187812549418), trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1538.187812549418), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals("5w4U<#S", trip0.getLicencePlate());
      
      double double0 = trip0.getRealTimeToClient();
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertEquals("N\u00E3o classificado", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1538.187812549418), trip0.getRealTimeToClient(), 0.01);
      assertEquals(1.0, trip0.getTime(), 0.01);
      assertEquals((-1.0), trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals((-1538.187812549418), trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1538.187812549418), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, trip0.getRating());
      assertEquals("5w4U<#S", trip0.getLicencePlate());
      assertEquals((-1538.187812549418), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1276.178018416319, 60.0);
      assertEquals(60.0, point2D_Double0.y, 0.01);
      assertEquals(1276.178018416319, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "", "", "", 0, 60.0, point2D_Double0, 1.0, (-284.00742899), 0.0);
      assertEquals(60.0, point2D_Double0.y, 0.01);
      assertEquals(1276.178018416319, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(60.0, trip0.getTime(), 0.01);
      assertEquals(60.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(0, trip0.getRating());
      assertEquals(60.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-284.00742899), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1), trip0.getID());
      
      int int0 = trip0.getRating();
      assertEquals(60.0, point2D_Double0.y, 0.01);
      assertEquals(1276.178018416319, point2D_Double0.x, 0.01);
      assertEquals(60.0, trip0.getTime(), 0.01);
      assertEquals(60.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(0, trip0.getRating());
      assertEquals(60.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-284.00742899), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-1), trip0.getID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofWeeks(1);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "", "Rr+TWx/uueMC2Z5 ;;W", "1yFWnUrVp1g+,h", 1, 1126.13982648, point2D_Double0, 0.0, 1, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(1, trip0.getID());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("1yFWnUrVp1g+,h", trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("Rr+TWx/uueMC2Z5 ;;W", trip0.getDriver());
      assertEquals(1126.13982648, trip0.getEstimatedTimeToDest(), 0.01);
      
      int int0 = trip0.getRating();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(1, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("1yFWnUrVp1g+,h", trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("Rr+TWx/uueMC2Z5 ;;W", trip0.getDriver());
      assertEquals(1126.13982648, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1276.178018416319, 60.0);
      assertEquals(1276.178018416319, point2D_Double0.x, 0.01);
      assertEquals(60.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "", "", "", 0, 60.0, point2D_Double0, 1.0, (-284.00742899), 0.0);
      assertEquals(1276.178018416319, point2D_Double0.x, 0.01);
      assertEquals(60.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals("", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-284.00742899), trip0.getRealTimeToClient(), 0.01);
      assertEquals(60.0, trip0.getPrice(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals(60.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(60.0, trip0.getTime(), 0.01);
      
      Double double0 = trip0.getPrice();
      assertEquals(1276.178018416319, point2D_Double0.x, 0.01);
      assertEquals(60.0, point2D_Double0.y, 0.01);
      assertNotNull(double0);
      assertEquals("", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-284.00742899), trip0.getRealTimeToClient(), 0.01);
      assertEquals(60.0, trip0.getPrice(), 0.01);
      assertEquals((-1), trip0.getID());
      assertEquals(60.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(60.0, trip0.getTime(), 0.01);
      assertEquals(60.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Double double0 = new Double((-1279.680487615055));
      assertNotNull(double0);
      assertEquals((-1279.680487615055), (double)double0, 0.01);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, double0, localDate0, "", "", "", 2803, 2510.1333908339875, point2D_Double0, 0.0, (-1279.680487615055), (-1279.680487615055));
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), trip0.getPrice(), 0.01);
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals("", trip0.getClient());
      assertEquals(2803, trip0.getRating());
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getDriver());
      
      Double double1 = trip0.getPrice();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), trip0.getPrice(), 0.01);
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals("", trip0.getClient());
      assertEquals(2803, trip0.getRating());
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals((-1279.680487615055), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1301.27336), 0.0);
      assertEquals((-1301.27336), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      assertNotNull(zonedDateTime0);
      
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1521), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) (-1301.27336), localDate0, "", "", "", (-4393), (-2846.18), point2D_Double0, 172.4238806533, 0.0, 0.0);
      assertEquals((-1301.27336), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals((-2846.18), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1521), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-4393), trip0.getRating());
      assertEquals((-1301.27336), trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getDriver());
      assertEquals(172.4238806533, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      
      Double double0 = trip0.getPrice();
      assertEquals((-1301.27336), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(double0);
      assertEquals((-2846.18), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1521), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-4393), trip0.getRating());
      assertEquals((-1301.27336), trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("", trip0.getDriver());
      assertEquals(172.4238806533, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1301.27336), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
      
      String string0 = trip0.getLicencePlate();
      assertNull(string0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getLicencePlate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1920, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "~]r*:Q", "~]r*:Q", "~]r*:Q", 1920, 333.783622188755, point2D_Double0, 0.0, 333.783622188755, 0.0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("~]r*:Q", trip0.getLicencePlate());
      assertEquals("~]r*:Q", trip0.getDriver());
      assertEquals(1920, trip0.getID());
      assertEquals(333.783622188755, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1920, trip0.getRating());
      assertEquals("~]r*:Q", trip0.getClient());
      assertEquals(333.783622188755, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      String string0 = trip0.getLicencePlate();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(string0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("~]r*:Q", trip0.getLicencePlate());
      assertEquals("~]r*:Q", trip0.getDriver());
      assertEquals(1920, trip0.getID());
      assertEquals(333.783622188755, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1920, trip0.getRating());
      assertEquals("~]r*:Q", trip0.getClient());
      assertEquals(333.783622188755, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("~]r*:Q", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Month month0 = Month.APRIL;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "s", "s", ">8dr$@t", 3165, 0.0, point2D_Double0, 60.0, 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(60.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(">8dr$@t", trip0.getClient());
      assertEquals("s", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("s", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3165, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getID());
      
      int int0 = trip0.getID();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(60.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(">8dr$@t", trip0.getClient());
      assertEquals("s", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("s", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(3165, trip0.getRating());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1, trip0.getID());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3473));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3473), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, (String) null, (String) null, (String) null, (-3473), (-3473), point2D_Double0, (-3473), 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertNull(trip0.getDriver());
      assertEquals((-3473.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3473), trip0.getRating());
      assertEquals((-3473), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-3473.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      
      int int0 = trip0.getID();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNull(trip0.getDriver());
      assertEquals((-3473.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3473), trip0.getRating());
      assertEquals((-3473), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-3473.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3473), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3473));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3473), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, (String) null, (String) null, (String) null, (-3473), (-3473), point2D_Double0, (-3473), 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertNull(trip0.getDriver());
      assertEquals((-3473.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getClient());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3473), trip0.getRating());
      assertEquals((-3473.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-3473), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNull(trip0.getDriver());
      assertEquals((-3473.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertNull(trip0.getClient());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3473), trip0.getRating());
      assertEquals((-3473.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-3473), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-3473.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNotNull(trip0);
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertNull(trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3199), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "26", "26", (-1410), 2902.190814, point2D_Double0, (-1410), 236.5343051, (-3030.3297860200933));
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals((-1410), trip0.getRating());
      assertEquals((-3030.3297860200933), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("26", trip0.getDriver());
      assertEquals(2902.190814, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1410.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("26", trip0.getClient());
      assertEquals((-3199), trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(236.5343051, trip0.getRealTimeToClient(), 0.01);
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1410), trip0.getRating());
      assertEquals((-3030.3297860200933), trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("26", trip0.getDriver());
      assertEquals(2902.190814, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1410.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("26", trip0.getClient());
      assertEquals((-3199), trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(236.5343051, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1410.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-854), 892.322753919);
      assertEquals(892.322753919, point2D_Double0.y, 0.01);
      assertEquals((-854.0), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-854), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "y.)~/5MLkOl$kUu", "y.)~/5MLkOl$kUu", "y.)~/5MLkOl$kUu", (-854), 0.0, point2D_Double0, 1.0, 1.0, 1.0);
      assertEquals(892.322753919, point2D_Double0.y, 0.01);
      assertEquals((-854.0), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-854), trip0.getID());
      assertEquals((-854.0), trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getClient());
      assertEquals((-854), trip0.getRating());
      assertEquals("y.)~/5MLkOl$kUu", trip0.getLicencePlate());
      
      double double0 = trip0.getEstimatedPrice();
      assertEquals(892.322753919, point2D_Double0.y, 0.01);
      assertEquals((-854.0), point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-854), trip0.getID());
      assertEquals((-854.0), trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getClient());
      assertEquals((-854), trip0.getRating());
      assertEquals("y.)~/5MLkOl$kUu", trip0.getLicencePlate());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "", "", 2803, 2510.1333908339875, point2D_Double0, 0.0, (-1279.680487615055), (-1279.680487615055));
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      assertEquals(2803, trip0.getRating());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      double double0 = trip0.getEstimatedPrice();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      assertEquals(2803, trip0.getRating());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofYears((-659));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, (String) null, (String) null, "KG~Hq$:", (-659), (-659), point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertNull(trip0.getDriver());
      assertEquals((-659.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-659), trip0.getRating());
      assertEquals("KG~Hq$:", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      
      String string0 = trip0.getDriver();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNull(string0);
      assertNull(trip0.getDriver());
      assertEquals((-659.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-659), trip0.getRating());
      assertEquals("KG~Hq$:", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.of((-1), (-1), 0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "B", "", "B", 0, 0.0, point2D_Double0, 0.0, 0.0, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("B", trip0.getClient());
      assertEquals("B", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      String string0 = trip0.getDriver();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(string0);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("B", trip0.getClient());
      assertEquals("B", trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNotNull(trip0);
      assertNull(trip0.getClient());
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      
      String string0 = trip0.getClient();
      assertNull(string0);
      assertNull(trip0.getClient());
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-446), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.y, localDate0, "", "r", "", 0, (-1005.784), point2D_Double0, 841.71998947832, 430.6823051737, 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals((-446), trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(841.71998947832, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("r", trip0.getDriver());
      assertEquals(430.6823051737, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1005.784), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      
      String string0 = trip0.getClient();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(string0);
      assertEquals((-446), trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals(841.71998947832, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("r", trip0.getDriver());
      assertEquals(430.6823051737, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-1005.784), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(297, 0.0);
      assertEquals(297.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double();
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      
      Period period0 = Period.of(297, (-1), (-1));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(297, point2D_Double0, point2D_Double1, (Double) 0.0, (Double) 0.0, localDate0, "", "", (String) null, (-1), 1.0, point2D_Double0, 1.0, 0.0, 0.0);
      assertEquals(297.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertNotNull(trip0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(297, trip0.getID());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals((-1), trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      
      double double0 = trip0.distance();
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals(297.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNull(trip0.getClient());
      assertEquals(1.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(297, trip0.getID());
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getDriver());
      assertEquals((-1), trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals(297.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "5LF", "5LF", "5LF", 0, 0.0, point2D_Double0, 0, 0, 0.0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("5LF", trip0.getLicencePlate());
      assertEquals("5LF", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("5LF", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      
      Trip trip1 = trip0.clone();
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("5LF", trip0.getLicencePlate());
      assertEquals("5LF", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("5LF", trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip1.getRating());
      assertEquals("5LF", trip1.getDriver());
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals("5LF", trip1.getClient());
      assertEquals("5LF", trip1.getLicencePlate());
      assertEquals(0.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(1, (-1.0));
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(1, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "5w4U<#S", "N\u00E3o classificado", "", 1, (-1538.187812549418), point2D_Double0, 0.0, (-1538.187812549418), (-1538.187812549418));
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals("N\u00E3o classificado", trip0.getDriver());
      assertEquals("5w4U<#S", trip0.getLicencePlate());
      assertEquals(1, trip0.getRating());
      assertEquals(1.0, trip0.getPrice(), 0.01);
      assertEquals((-1538.187812549418), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1538.187812549418), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(1.0, trip0.getTime(), 0.01);
      assertEquals((-1538.187812549418), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      Trip trip1 = trip0.clone();
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals(1.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
      assertEquals("N\u00E3o classificado", trip0.getDriver());
      assertEquals("5w4U<#S", trip0.getLicencePlate());
      assertEquals(1, trip0.getRating());
      assertEquals(1.0, trip0.getPrice(), 0.01);
      assertEquals((-1538.187812549418), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1538.187812549418), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(1, trip0.getID());
      assertEquals(1.0, trip0.getTime(), 0.01);
      assertEquals((-1538.187812549418), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1538.187812549418), trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals(1, trip1.getRating());
      assertEquals("5w4U<#S", trip1.getLicencePlate());
      assertEquals(1.0, trip1.getPrice(), 0.01);
      assertEquals("", trip1.getClient());
      assertEquals(1, trip1.getID());
      assertEquals((-1538.187812549418), trip1.getEstimatedPrice(), 0.01);
      assertEquals("N\u00E3o classificado", trip1.getDriver());
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(1.0, trip1.getTime(), 0.01);
      assertEquals((-1538.187812549418), trip1.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-301), (-301));
      assertEquals((-301.0), point2D_Double0.y, 0.01);
      assertEquals((-301.0), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Period period0 = Period.ofYears((-301));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-301), point2D_Double0, point2D_Double0, (Double) (-301.0), (Double) point2D_Double0.x, localDate0, "", "", "", 0, (-301.0), point2D_Double0, (-1.0), (-301.0), 0.0);
      assertEquals((-301.0), point2D_Double0.y, 0.01);
      assertEquals((-301.0), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals("", trip0.getDriver());
      assertEquals((-301.0), trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-301.0), trip0.getTime(), 0.01);
      assertEquals((-301.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-301.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-301), trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      
      Trip trip1 = trip0.clone();
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals((-301.0), point2D_Double0.y, 0.01);
      assertEquals((-301.0), point2D_Double0.x, 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
      assertEquals("", trip0.getDriver());
      assertEquals((-301.0), trip0.getPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-301.0), trip0.getTime(), 0.01);
      assertEquals((-301.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-301.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals((-301), trip0.getID());
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals((-301.0), trip1.getTime(), 0.01);
      assertEquals("", trip1.getClient());
      assertEquals("", trip1.getLicencePlate());
      assertEquals((-301.0), trip1.getRealTimeToClient(), 0.01);
      assertEquals((-301), trip1.getID());
      assertEquals(0, trip1.getRating());
      assertEquals((-301.0), trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip1.getDriver());
      assertEquals((-301.0), trip1.getPrice(), 0.01);
      assertEquals((-1.0), trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "C~9", "C~9", ") ---> (", 24, 0.0, point2D_Double0, 24, 24, 462.255);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(24.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(462.255, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("C~9", trip0.getLicencePlate());
      assertEquals("C~9", trip0.getDriver());
      assertEquals(24.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(") ---> (", trip0.getClient());
      assertEquals(24, trip0.getRating());
      
      Trip trip1 = trip0.clone();
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
      assertEquals(24.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(462.255, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("C~9", trip0.getLicencePlate());
      assertEquals("C~9", trip0.getDriver());
      assertEquals(24.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(") ---> (", trip0.getClient());
      assertEquals(24, trip0.getRating());
      assertEquals(") ---> (", trip1.getClient());
      assertEquals("C~9", trip1.getDriver());
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals("C~9", trip1.getLicencePlate());
      assertEquals(462.255, trip1.getEstimatedPrice(), 0.01);
      assertEquals(24.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(24.0, trip1.getRealTimeToClient(), 0.01);
      assertEquals(24, trip1.getRating());
      assertEquals(0.0, trip1.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "", "", 2803, 2510.1333908339875, point2D_Double0, 0.0, (-1279.680487615055), (-1279.680487615055));
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2803, trip0.getRating());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      
      Trip trip1 = trip0.clone();
      assertNotSame(trip0, trip1);
      assertNotSame(trip1, trip0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip1);
      assertFalse(trip1.equals((Object)trip0));
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2803, trip0.getRating());
      assertEquals("", trip0.getDriver());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      assertEquals("", trip1.getDriver());
      assertEquals((-1279.680487615055), trip1.getEstimatedPrice(), 0.01);
      assertEquals(2510.1333908339875, trip1.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip1.getTime(), 0.01);
      assertEquals(2803, trip1.getRating());
      assertEquals(0.0, trip1.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), trip1.getRealTimeToClient(), 0.01);
      assertEquals("", trip1.getClient());
      assertEquals(0, trip1.getID());
      assertEquals(0.0, trip1.getPrice(), 0.01);
      assertEquals("", trip1.getLicencePlate());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNotNull(trip0);
      assertNull(trip0.getClient());
      assertEquals(0, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      // Undeclared exception!
      try { 
        trip0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertNull(trip0.getDriver());
      assertNull(trip0.getClient());
      assertNull(trip0.getLicencePlate());
      assertEquals(0, trip0.getID());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      
      // Undeclared exception!
      try { 
        trip0.getTaxiPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Trip trip0 = new Trip();
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertNull(trip0.getDriver());
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0, trip0.getRating());
      assertNull(trip0.getClient());
      assertNull(trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(0, trip0.getID());
      
      // Undeclared exception!
      try { 
        trip0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Trip trip0 = null;
      try {
        trip0 = new Trip(507, point2D_Double0, point2D_Double0, (Double) 507.0, (Double) null, localDate0, "rD^_j", "rD^_j", "", 0, (-4925.388765730512), point2D_Double0, 434.8391229, 434.8391229, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-1780), trip0.getID());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals((-1780), trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      
      String string0 = trip0.getDriver();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(string0);
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-1780), trip0.getID());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals((-1780), trip0.getRating());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals("4s$(RZx!ggTp", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-854), 892.322753919);
      assertEquals((-854.0), point2D_Double0.x, 0.01);
      assertEquals(892.322753919, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-854), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "y.)~/5MLkOl$kUu", "y.)~/5MLkOl$kUu", "y.)~/5MLkOl$kUu", (-854), 0.0, point2D_Double0, 1.0, 1.0, 1.0);
      assertEquals((-854.0), point2D_Double0.x, 0.01);
      assertEquals(892.322753919, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals((-854.0), trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getClient());
      assertEquals("y.)~/5MLkOl$kUu", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-854), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-854), trip0.getID());
      
      int int0 = trip0.getRating();
      assertEquals((-854.0), point2D_Double0.x, 0.01);
      assertEquals(892.322753919, point2D_Double0.y, 0.01);
      assertEquals((-854.0), trip0.getTime(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getClient());
      assertEquals("y.)~/5MLkOl$kUu", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals("y.)~/5MLkOl$kUu", trip0.getDriver());
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-854), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-854), trip0.getID());
      assertEquals((-854), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-3690), 986.805069);
      assertEquals(986.805069, point2D_Double0.y, 0.01);
      assertEquals((-3690.0), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3690), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 986.805069, localDate0, "X(.kUX", "C2~/Xoz9Z", "X(.kUX", 813, (-1.0), point2D_Double0, 986.805069, (-3690), (-1.0));
      assertEquals(986.805069, point2D_Double0.y, 0.01);
      assertEquals((-3690.0), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals("X(.kUX", trip0.getLicencePlate());
      assertEquals((-3690), trip0.getID());
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(986.805069, trip0.getPrice(), 0.01);
      assertEquals((-3690.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("C2~/Xoz9Z", trip0.getDriver());
      assertEquals((-3690.0), trip0.getTime(), 0.01);
      assertEquals(986.805069, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("X(.kUX", trip0.getClient());
      assertEquals(813, trip0.getRating());
      
      double double0 = trip0.getEstimatedTimeToClient();
      assertEquals(986.805069, point2D_Double0.y, 0.01);
      assertEquals((-3690.0), point2D_Double0.x, 0.01);
      assertEquals("X(.kUX", trip0.getLicencePlate());
      assertEquals((-3690), trip0.getID());
      assertEquals((-1.0), trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1.0), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(986.805069, trip0.getPrice(), 0.01);
      assertEquals((-3690.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals("C2~/Xoz9Z", trip0.getDriver());
      assertEquals((-3690.0), trip0.getTime(), 0.01);
      assertEquals(986.805069, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("X(.kUX", trip0.getClient());
      assertEquals(813, trip0.getRating());
      assertEquals(986.805069, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals((-1780), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      
      double double0 = trip0.getEstimatedPrice();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals((-1780), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-1780), trip0.getID());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      
      Point2D.Double point2D_Double1 = trip0.getEnd();
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals((-6315.8227), point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-1780), trip0.getID());
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-3199), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "26", "26", (-1410), 2902.190814, point2D_Double0, (-1410), 236.5343051, (-3030.3297860200933));
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(trip0);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-3199), trip0.getID());
      assertEquals((-1410), trip0.getRating());
      assertEquals((-1410.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("26", trip0.getClient());
      assertEquals(2902.190814, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(236.5343051, trip0.getRealTimeToClient(), 0.01);
      assertEquals("26", trip0.getDriver());
      assertEquals((-3030.3297860200933), trip0.getEstimatedPrice(), 0.01);
      
      double double0 = trip0.getEstimatedTimeToDest();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals("", trip0.getLicencePlate());
      assertEquals((-3199), trip0.getID());
      assertEquals((-1410), trip0.getRating());
      assertEquals((-1410.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("26", trip0.getClient());
      assertEquals(2902.190814, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(236.5343051, trip0.getRealTimeToClient(), 0.01);
      assertEquals("26", trip0.getDriver());
      assertEquals((-3030.3297860200933), trip0.getEstimatedPrice(), 0.01);
      assertEquals(2902.190814, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      assertNotNull(localDate0);
      
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(trip0);
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals((-1780), trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      
      Point2D.Double point2D_Double1 = trip0.getTaxiPos();
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertEquals((-6315.8227), point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals((-6315.8227), point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals("4s$(RZx!ggTp", trip0.getDriver());
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1780), trip0.getRating());
      assertEquals((-1780), trip0.getID());
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("4s$(RZx!ggTp", trip0.getLicencePlate());
      assertEquals("4s$(RZx!ggTp", trip0.getClient());
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-1301.27336), 0.0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      Trip trip0 = new Trip((-1521), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) (-1301.27336), localDate0, "", "", "", (-4393), (-2846.18), point2D_Double0, 172.4238806533, 0.0, 0.0);
      Trip trip1 = new Trip(trip0);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1301.27336), trip0.getPrice(), 0.01);
      assertEquals((-4393), trip0.getRating());
      assertEquals(172.4238806533, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1521), trip0.getID());
      assertEquals((-2846.18), trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      Double double0 = trip0.getTime();
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-1780), trip0.getID());
      assertEquals((-1780), trip0.getRating());
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-854), 892.322753919);
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-854), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "y.)~/5MLkOl$kUu", "y.)~/5MLkOl$kUu", "y.)~/5MLkOl$kUu", (-854), 0.0, point2D_Double0, 1.0, 1.0, 1.0);
      double double0 = trip0.getRealTimeToClient();
      assertEquals((-854), trip0.getRating());
      assertEquals(1.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(1.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-854.0), trip0.getTime(), 0.01);
      assertEquals((-854), trip0.getID());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      trip0.getStart();
      assertEquals((-1780), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1780), trip0.getID());
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double((-6315.8227), 0.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1780));
      Trip trip0 = new Trip((-1780), point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) 0.0, localDate0, "4s$(RZx!ggTp", "4s$(RZx!ggTp", "4s$(RZx!ggTp", (-1780), 280.944093011341, point2D_Double0, (-3240.5), (-6315.8227), 0.0);
      trip0.distance();
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-1780), trip0.getID());
      assertEquals((-1780), trip0.getRating());
      assertEquals((-6315.8227), trip0.getTime(), 0.01);
      assertEquals((-3240.5), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-6315.8227), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals(280.944093011341, trip0.getEstimatedTimeToDest(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "", "", 2803, 2510.1333908339875, point2D_Double0, 0.0, (-1279.680487615055), (-1279.680487615055));
      Double double0 = trip0.getPrice();
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0, trip0.getID());
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      assertEquals(2803, trip0.getRating());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-446), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) point2D_Double0.x, localDate0, "", "r", "", 0, (-1005.784), point2D_Double0, 841.71998947832, 430.6823051737, 0.0);
      String string0 = trip0.getLicencePlate();
      assertEquals(841.71998947832, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-446), trip0.getID());
      assertEquals(0, trip0.getRating());
      assertEquals((-1005.784), trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals("", trip0.getClient());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals("r", trip0.getDriver());
      assertEquals("", string0);
      assertEquals(430.6823051737, trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.y, (Double) point2D_Double0.y, localDate0, "", "", "", 2803, 2510.1333908339875, point2D_Double0, 0.0, (-1279.680487615055), (-1279.680487615055));
      int int0 = trip0.getID();
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2803, trip0.getRating());
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals(0, int0);
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Trip trip0 = new Trip(0, point2D_Double0, point2D_Double0, (Double) point2D_Double0.x, (Double) point2D_Double0.x, localDate0, "", "", "", 2803, 2510.1333908339875, point2D_Double0, 0.0, (-1279.680487615055), (-1279.680487615055));
      trip0.getDate();
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-1279.680487615055), trip0.getEstimatedPrice(), 0.01);
      assertEquals(2510.1333908339875, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(2803, trip0.getRating());
      assertEquals(0, trip0.getID());
      assertEquals((-1279.680487615055), trip0.getRealTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-3199), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "", "26", "26", (-1410), 2902.190814, point2D_Double0, (-1410), 236.5343051, (-3030.3297860200933));
      String string0 = trip0.getClient();
      assertEquals((-1410), trip0.getRating());
      assertEquals((-1410.0), trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals((-3199), trip0.getID());
      assertEquals("26", trip0.getDriver());
      assertEquals("", trip0.getLicencePlate());
      assertEquals(2902.190814, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(236.5343051, trip0.getRealTimeToClient(), 0.01);
      assertEquals((-3030.3297860200933), trip0.getEstimatedPrice(), 0.01);
      assertEquals("26", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Trip trip0 = new Trip();
      Trip trip1 = null;
      try {
        trip1 = new Trip(trip0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-9), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "L|", "L|", "L|", (-9), 0.0, point2D_Double0, (-9), (-9), 0.0);
      String string0 = trip0.toString();
      assertEquals("Viagem de (0.0,0.0) ---> (0.0,0.0)\nData : 2014-02-14\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : 0h:0m:0s\nDura\u00E7\u00E3o real : 0h:0m:0s\nPre\u00E7o : 0\u20AC\nEmail condutor : L|\nEmail cliente : L|\nMatr\u00EDcula ve\u00EDculo : L|\nClassifica\u00E7\u00E3o : -9**\nPosi\u00E7\u00E3o inicial do taxi : [0.0,0.0]\nTempo previsto at\u00E9 ao cliente : -9h:0m:0s\nTempo real at\u00E9 ao cliente : -9h:0m:0s\nPre\u00E7o estimado : 0\u20AC\nTrip id : -9", string0);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-9), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "L|", "L|", "L|", (-9), 0.0, point2D_Double0, (-9), (-9), 0.0);
      trip0.clone();
      assertEquals((-9.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getTime(), 0.01);
      assertEquals((-9), trip0.getRating());
      assertEquals((-9), trip0.getID());
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getPrice(), 0.01);
      assertEquals((-9.0), trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-9), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "L|", "L|", "L|", (-9), 0.0, point2D_Double0, (-9), (-9), 0.0);
      trip0.setRating((-9));
      assertEquals((-9), trip0.getID());
      assertEquals((-9.0), trip0.getRealTimeToClient(), 0.01);
      assertEquals((-9), trip0.getRating());
      assertEquals(0.0, trip0.getEstimatedTimeToDest(), 0.01);
      assertEquals(0.0, trip0.getEstimatedPrice(), 0.01);
      assertEquals((-9.0), trip0.getEstimatedTimeToClient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Trip trip0 = new Trip((-1), point2D_Double0, point2D_Double0, (Double) 0.0, (Double) 0.0, localDate0, "9&6", "9&6", "9&6", (-1), (-1), point2D_Double0, 0.0, 0.0, (-1));
      String string0 = trip0.toString();
      assertEquals(0.0, trip0.getRealTimeToClient(), 0.01);
      assertEquals(0.0, trip0.getEstimatedTimeToClient(), 0.01);
      assertEquals("Viagem de (0.0,0.0) ---> (0.0,0.0)\nData : 2014-02-14\nDist\u00E2ncia : 0km\nDura\u00E7\u00E3o prevista : -1h:0m:0s\nDura\u00E7\u00E3o real : 0h:0m:0s\nPre\u00E7o : 0\u20AC\nEmail condutor : 9&6\nEmail cliente : 9&6\nMatr\u00EDcula ve\u00EDculo : 9&6\nClassifica\u00E7\u00E3o : N\u00E3o classificado\nPosi\u00E7\u00E3o inicial do taxi : [0.0,0.0]\nTempo previsto at\u00E9 ao cliente : 0h:0m:0s\nTempo real at\u00E9 ao cliente : 0h:0m:0s\nPre\u00E7o estimado : -1\u20AC\nTrip id : -1", string0);
  }
}
