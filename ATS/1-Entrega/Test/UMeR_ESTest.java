/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 17 23:18:03 GMT 2018
 */

package uMer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import uMer.Bike;
import uMer.Car;
import uMer.Client;
import uMer.Company;
import uMer.Driver;
import uMer.Helicopter;
import uMer.Trip;
import uMer.UMeR;
import uMer.User;
import uMer.Van;
import uMer.Vehicle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UMeR_ESTest extends UMeR_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("~vK3", "~vK3");
      boolean boolean1 = uMeR0.loginUser("~vK3", "&(7UcU#Q+dLK[%G:4xU");
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.addRating("ow]P&2UMNgSNzxv&<j", 23, 4249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      // Undeclared exception!
      try { 
        uMeR0.addQueue("uMer.Helicopter", "v!Ps)h+vT3BCl*!", point2D_Double0, point2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      Point2D.Double point2D_Double0 = new Point2D.Double(1886.86991221281, 1886.86991221281);
      Client client0 = new Client("GxYWo'n2Og?MJEl;", "2t<^-7h/tITfp)ih", "2t<^-7h/tITfp)ih", "GxYWo'n2Og?MJEl;", localDate0, point2D_Double0, 0.0, arrayList0, (-3525), 434.953, false, "GxYWo'n2Og?MJEl;");
      Point2D.Double point2D_Double1 = new Point2D.Double();
      Bike bike0 = new Bike("Driver", (-44.23799363014), point2D_Double1, "2t<^-7h/tITfp)ih");
      Trip trip0 = uMeR0.newTrip(client0, driver0, bike0, point2D_Double0);
      //  // Unstable assertion: assertEquals(37.072023986630526, trip0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(763L);
      Client client0 = new Client("", "", "0.<%aJ", "s", localDate0);
      Boolean boolean0 = Boolean.valueOf(true);
      Company company0 = new Company("", "");
      ArrayList<Trip> arrayList0 = company0.getTrips();
      Driver driver0 = new Driver("k6Mhh)KM ", "", "\n---Vehicles---\n", "", localDate0, (-2252.4566565801524), 763L, boolean0, (-2252.4566565801524), arrayList0, (-25), 763L, (-2782.36098103279), (String) null, "s", (-1014.22156633884));
      driver0.addRating((-25));
      Point2D.Double point2D_Double0 = new Point2D.Double(8.318190706653754, (-670.21803));
      Helicopter helicopter0 = new Helicopter("k6Mhh)KM ", (-1014.22156633884), point2D_Double0, "0.<%aJ");
      uMeR0.newTrip(client0, driver0, helicopter0, point2D_Double0);
      assertEquals(1, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double(100.0, 2.0);
      Month month0 = Month.AUGUST;
      LocalDate localDate0 = MockLocalDate.of(2, month0, 2);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = uMeR0.getTrips();
      Driver driver0 = new Driver("---Drivers---\n", "---Drivers---\n", "'*bGuj!x0*", "D8ITmLRvas2", localDate0, 100.0, 100.0, boolean0, 3487.5882901866, arrayList0, 0, 0, 2.0, "---Drivers---\n", "'*bGuj!x0*", 0);
      Car car0 = new Car("'*bGuj!x0*", 2.0, point2D_Double0, "D8ITmLRvas2");
      boolean boolean1 = uMeR0.registerVehicleP(car0);
      assertTrue(boolean1);
      
      double double0 = uMeR0.realTime(point2D_Double0, point2D_Double0, driver0, car0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.changeDriverVehicle(",", "Eu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      HashMap<String, Client> hashMap0 = uMeR0.getClients();
      Client client0 = new Client("^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "/F=wQ)%A40 D", localDate0);
      hashMap0.put("^Dpn}Ql7ID ^F+", client0);
      uMeR0.setClients(hashMap0);
      Trip trip0 = new Trip();
      // Undeclared exception!
      try { 
        uMeR0.addTrip("^Dpn}Ql7ID ^F+", "/F=wQ)%A40 D", "/F=wQ)%A40 D", trip0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point2D_Double0.x = 1.0879119772755612;
      Helicopter helicopter0 = new Helicopter(">[\"%zu8RW/14NF", 0.0, point2D_Double0, ">[\"%zu8RW/14NF");
      Point2D.Double point2D_Double1 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("\nPremium : ", "N\u00E3o classificado", "1{cO", "admin", localDate0, 0.0, "admin");
      double double0 = uMeR0.realTime(point2D_Double0, point2D_Double1, driver0, helicopter0);
      assertEquals(0.015170385952663595, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Van van0 = new Van("Driver \n", 1.2, point2D_Double0, "Driver \n");
      van0.setSpeed((-706.3577));
      Point2D.Double point2D_Double1 = new Point2D.Double();
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Driver driver0 = new Driver((String) null, "xfDddM", "\")y9xAlh#R", "Driver \n", localDate0, 646.4757730346098, "A>6<&@V3n");
      double double0 = uMeR0.realTime(point2D_Double1, point2D_Double0, driver0, van0);
      //  // Unstable assertion: assertEquals((-1.3181733413827512), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTripID((byte)67);
      LocalDate localDate0 = MockLocalDate.ofYearDay((byte)35, (byte)83);
      Client client0 = new Client("9KU,G/+a<k8wT", "v!Ps)h+vT3BCl*!", "uMer.Vehicle", "uMer.Vehicle", localDate0);
      Driver driver0 = new Driver("v!Ps)h+vT3BCl*!", (String) null, (String) null, "9KU,G/+a<k8wT", localDate0, (byte)3, ">e_~jzR?Bf*");
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("9KU,G/+a<k8wT", 0.9, point2D_Double0, "12345");
      uMeR0.newTrip(client0, driver0, helicopter0, point2D_Double0);
      assertEquals(68, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTripID((-1));
      LocalDate localDate0 = MockLocalDate.ofYearDay((byte)35, (byte)83);
      Client client0 = new Client("9KUK,G/+a<k8wT", "v!Ps)h+vT3BCl*!", "uMer.Vehicle", "uMer.Vehicle", localDate0);
      Driver driver0 = new Driver("v!Ps)h+vT3BCl*!", (String) null, (String) null, "9KUK,G/+a<k8wT", localDate0, (byte)3, ">e_~jzR?Bf*");
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter("9KUK,G/+a<k8wT", 0.9, point2D_Double0, "12345");
      uMeR0.newTrip(client0, driver0, helicopter0, point2D_Double0);
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.now();
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      Point2D.Double point2D_Double0 = new Point2D.Double(1886.86991221281, 1886.86991221281);
      Client client0 = new Client("GxYWo'n2Og?MJEl;", "2t<^-7h/tITfp)ih", "2t<^-7h/tITfp)ih", "GxYWo'n2Og?MJEl;", localDate0, point2D_Double0, 0.0, arrayList0, (-3518), 434.953, false, "GxYWo'n2Og?MJEl;");
      Bike bike0 = new Bike("Driver", (-44.646687680833594), point2D_Double0, "2t<^-7h/tITfp)ih");
      bike0.setSpeed((-1560.8190804));
      uMeR0.newTrip(client0, driver0, bike0, point2D_Double0);
      assertEquals(2668.4370202850873, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.saveUMeR("F8V\"Q[$i<71");
      UMeR uMeR1 = UMeR.loadUMeR("F8V\"Q[$i<71");
      assertEquals(0.0, uMeR1.getTotalTime(), 0.01);
      assertEquals(0, uMeR1.getWeather());
      assertEquals(0, uMeR1.getTripID());
      assertEquals(0.0, uMeR1.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR1.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTripID((byte)67);
      int int0 = uMeR0.getTripID();
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTripID((-1));
      int int0 = uMeR0.getTripID();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      Point2D.Double point2D_Double0 = new Point2D.Double(1886.86991221281, 1886.86991221281);
      Client client0 = new Client("GxYWo'n2Og?MJEl;", "2t<^-7h/tITfp)ih", "2t<^-7h/tITfp)ih", "GxYWo'n2Og?MJEl;", localDate0, point2D_Double0, 0.0, arrayList0, (-3518), 434.953, false, "GxYWo'n2Og?MJEl;");
      Bike bike0 = new Bike("Driver", (-44.23799363014), point2D_Double0, "2t<^-7h/tITfp)ih");
      uMeR0.newTrip(client0, driver0, bike0, point2D_Double0);
      double double0 = uMeR0.getTotalTime();
      //  // Unstable assertion: assertEquals(1, uMeR0.getTripID());
      //  // Unstable assertion: assertEquals(39.53265589354634, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      Point2D.Double point2D_Double0 = new Point2D.Double(1886.86991221281, 1886.86991221281);
      Client client0 = new Client("GxYWo'n2Og?MJEl;", "2t<^-7h/tITfp)ih", "2t<^-7h/tITfp)ih", "GxYWo'n2Og?MJEl;", localDate0, point2D_Double0, 0.0, arrayList0, (-3525), 434.953, false, "GxYWo'n2Og?MJEl;");
      Bike bike0 = new Bike("Driver", (-44.23799363014), point2D_Double0, "2t<^-7h/tITfp)ih");
      uMeR0.newTrip(client0, driver0, bike0, point2D_Double0);
      uMeR0.getTotalDistance();
      //  // Unstable assertion: assertEquals(2175.285341693527, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setMoneyGenerated(607.248029802);
      double double0 = uMeR0.getMoneyGenerated();
      assertEquals(607.248029802, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setMoneyGenerated((-694.4659098257));
      double double0 = uMeR0.getMoneyGenerated();
      assertEquals((-694.4659098257), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      uMeR0.registerUser(driver0, "2t<^-7h/tITfp)ih");
      uMeR0.loginUser("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;");
      uMeR0.getCurrent_user();
      assertNotEquals("GxYWo'n2Og?MJEl;", uMeR0.getCurrent_user());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      uMeR0.registerUser(driver0, "2t<^-7h/tITfp)ih");
      uMeR0.loginUser("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;");
      uMeR0.getCurrent_Class();
      assertNotEquals("Driver", uMeR0.getCurrent_Class());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Double point2D_Double1 = new Point2D.Double(0.9, 3512.62405371);
      double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double1, 0.0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Point2D.Double point2D_Double1 = new Point2D.Double();
      double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double1, (-3092.3643613));
      assertEquals((-0.3944819410970415), double0, 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Van van0 = new Van("", 1.2, point2D_Double0, "");
      boolean boolean0 = uMeR0.registerVehicleP(van0);
      assertTrue(boolean0);
      
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Client client0 = new Client("", "", "xUDdM", ")\nOwner : ", localDate0);
      String string0 = uMeR0.closestAvailableTaxi(client0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertNotNull(string0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.allUsers();
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.saveUMeR((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uMeR0.saveUMeR("F8V\"Q[$i<71");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      try { 
        uMeR0.saveUMeR("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.registerVehicleP((Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.registerUser((User) null, "Fila de espera vazia.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-165.1252), (-165.1252));
      uMeR0.registerCompany("uMer.CustomProbabilisticDistribution", "uMer.CustomProbabilisticDistribution");
      Van van0 = new Van("uMer.CustomProbabilisticDistribution", (-568.861791814), point2D_Double0, "uMer.CustomProbabilisticDistribution");
      Trip trip0 = new Trip();
      van0.addTrip(trip0);
      // Undeclared exception!
      try { 
        uMeR0.registerCompanyVehicle("uMer.CustomProbabilisticDistribution", van0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.Trip", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      HashMap<String, Client> hashMap0 = new HashMap<String, Client>();
      hashMap0.put("^Dpn}Ql7ID ^F+", (Client) null);
      uMeR0.setClients(hashMap0);
      // Undeclared exception!
      try { 
        uMeR0.registerCompany("F8V\"Q[$i<71", "2t<^-7h/tITfp)ih");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      LocalDate localDate0 = MockLocalDate.now();
      Driver driver0 = new Driver("[w7uL}(0B[{TjYFpV>d", "q5+?n?y @u", "\n---Vehicles---\n", "RPy", localDate0, 0.48708838127, "KVs{`PK%'Dg");
      // Undeclared exception!
      try { 
        uMeR0.realTime(point2D_Double0, point2D_Double0, driver0, (Vehicle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setAllDrivers((HashMap<String, Driver>) null);
      // Undeclared exception!
      try { 
        uMeR0.ordDriver((Comparator<Driver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setClients((HashMap<String, Client>) null);
      Comparator<Client> comparator0 = (Comparator<Client>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        uMeR0.ordClient(comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(763L);
      Boolean boolean0 = Boolean.valueOf(true);
      Company company0 = new Company("", "");
      ArrayList<Trip> arrayList0 = company0.getTrips();
      Driver driver0 = new Driver("k6Mhh)KM ", "", "\n---Vehicles---\n", "", localDate0, (-2252.4566565801524), 763L, boolean0, (-2252.4566565801524), arrayList0, (-25), 2213.9, (-2782.36098103279), (String) null, "s", (-1014.22156633884));
      Point2D.Double point2D_Double0 = new Point2D.Double(8.318190706653754, (-670.21803));
      Helicopter helicopter0 = new Helicopter("&Ae*p.6xr~oYTPR", (-1014.22156633884), point2D_Double0, (String) null);
      // Undeclared exception!
      try { 
        uMeR0.newTrip((Client) null, driver0, helicopter0, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.loginUser("admin", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        UMeR.loadUMeR((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{014!Z");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        UMeR.loadUMeR("{014!Z");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Utilizador - ");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        UMeR.loadUMeR("Utilizador - ");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.estimatedTime((Point2D.Double) null, (Point2D.Double) null, 110.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.doTripQueue("\nTempo real at\u00E9 ao cliente : ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.doAllTripsQueue("12345");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("hh$kRd|\u0006CV<&bitWF,", (-708.567), point2D_Double0, "i6Hwn^V/k");
      uMeR0.registerVehicleP(car0);
      // Undeclared exception!
      try { 
        uMeR0.closestAvailableTaxi((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.changeDriverAvailability("vK3", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Car car0 = new Car("2kZ", (-708.567), point2D_Double0, "i6Hwn^V/k");
      uMeR0.registerVehicleP(car0);
      // Undeclared exception!
      try { 
        uMeR0.calculateTraffic((Vehicle) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      HashMap<String, Driver> hashMap0 = uMeR0.getAllDrivers();
      hashMap0.put("^Dpn}Ql7ID ^F+", (Driver) null);
      uMeR0.setDrivers(hashMap0);
      // Undeclared exception!
      try { 
        uMeR0.allUsers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-4528.4164680855365), (-4528.4164680855365));
      Helicopter helicopter0 = new Helicopter("u\"ea\rwD`YD2DAf6;^", (-4528.4164680855365), point2D_Double0, "");
      int int0 = uMeR0.calculateTraffic(helicopter0, (-4528.4164680855365));
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      HashMap<String, Client> hashMap0 = new HashMap<String, Client>();
      Client client0 = new Client("^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "/F=wQ)%A40 D", localDate0);
      hashMap0.put("^Dpn}Ql7ID ^F+", client0);
      uMeR0.setClients(hashMap0);
      uMeR0.allUsers();
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("", "");
      assertTrue(boolean0);
      
      uMeR0.getCompanies();
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getCompanies();
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-60.2422382), 1.0);
      double double0 = uMeR0.estimatedTime(point2D_Double0, point2D_Double0, (-60.2422382));
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.loginUser("admin", "admin");
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.registerCompany("uMer.CustomProbabilisticDistribution", "uMer.CustomProbabilisticDistribution");
      boolean boolean0 = uMeR0.loginUser("uMer.CustomProbabilisticDistribution", "uMer.CustomProbabilisticDistribution");
      assertEquals("Company", uMeR0.getCurrent_Class());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      boolean boolean1 = uMeR0.registerUser(driver0, "2t<^-7h/tITfp)ih");
      boolean boolean2 = uMeR0.loginUser("GxYWo'n2Og?MJEl;", "Driver");
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.ordDriver((Comparator<Driver>) null);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Comparator<Client> comparator0 = (Comparator<Client>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      uMeR0.ordClient(comparator0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Van van0 = new Van("Driver \n", 1.2, point2D_Double0, "Driver \n");
      uMeR0.registerVehicleP(van0);
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Client client0 = new Client("Driver \n", "Driver \n", "xUDdM", ")\nOwner : ", localDate0);
      // Undeclared exception!
      try { 
        uMeR0.newTripClosest(client0, point2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1638);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Client client0 = new Client("", ":", "", "", localDate0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 0.0);
      uMeR0.newTripClosest(client0, point2D_Double0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Client client0 = new Client("c7mxu}S%", "/F=wQ)%A40 D", "/F=wQ)%A40 D", "F8V\"Q[$i<71", localDate0);
      Point2D.Double point2D_Double0 = new Point2D.Double(2263, 2263);
      uMeR0.newTripSpecific(client0, "F8V\"Q[$i<71", point2D_Double0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(763L);
      Client client0 = new Client("", "z", "0.<%aJ", "\n---Clients---\n", localDate0);
      Boolean boolean0 = Boolean.valueOf(false);
      Company company0 = new Company("\n", "\n");
      ArrayList<Trip> arrayList0 = company0.getTrips();
      Driver driver0 = new Driver("k6Mhh)KM ", "z", "\n---Vehicles---\n", "", localDate0, (-2252.4566565801524), 763L, boolean0, (-2252.4566565801524), arrayList0, 1, 2213.9, (-2782.36098103279), (String) null, "\n---Clients---\n", (-1014.22156633884));
      Point2D.Double point2D_Double0 = new Point2D.Double(8.5, (-670.21803));
      Helicopter helicopter0 = new Helicopter("&Ae*p.6xr~oYTPR", (-1014.22156633884), point2D_Double0, (String) null);
      uMeR0.newTrip(client0, driver0, helicopter0, point2D_Double0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Van van0 = new Van("Driver \n", 1.2, point2D_Double0, "Driver \n");
      boolean boolean0 = uMeR0.registerVehicleP(van0);
      assertTrue(boolean0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double();
      Van van1 = new Van("Driver \n", 2.0, point2D_Double1, "Driver \n");
      int int0 = uMeR0.calculateTraffic(van1, 378.4926921249797);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Van van0 = new Van("Driver \n", 1.2, point2D_Double0, "Driver \n");
      boolean boolean0 = uMeR0.registerVehicleP(van0);
      assertTrue(boolean0);
      
      int int0 = uMeR0.calculateTraffic(van0, 378.4926921249797);
      assertEquals(2, int0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("Driver \n", "Driver \n");
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Van van0 = new Van("Driver \n", 1.2, point2D_Double0, "Driver \n");
      boolean boolean1 = uMeR0.registerVehicleP(van0);
      assertTrue(boolean1 == boolean0);
      
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Client client0 = new Client("Driver \n", "Driver \n", "xfDddM", ")\nOwner : ", localDate0);
      String string0 = uMeR0.closestAvailableTaxi(client0);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertNull(string0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-718.822300653762), (-718.822300653762));
      Van van0 = new Van("Driver \n", 1.2, point2D_Double0, "Driver \n");
      boolean boolean0 = uMeR0.registerVehicleP(van0);
      assertTrue(boolean0);
      
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Client client0 = new Client("Driver \n", "Driver \n", "xfDddM", ")\nOwner : ", localDate0);
      String string0 = uMeR0.closestAvailableTaxi(client0);
      assertNotNull(string0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Period period0 = Period.ofWeeks(1310);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-3142.53255062012));
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>(1310);
      Client client0 = new Client("\nN\u00FAmero de viagens :", "", "", "---Drivers---\n", localDate0, point2D_Double0, 971.0, arrayList0, 971, (-1658.96826), false, "\nN\u00FAmero de viagens :");
      uMeR0.removeUser(client0);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      ArrayList<Trip> arrayList0 = new ArrayList<Trip>();
      Driver driver0 = new Driver("GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", localDate0, 0.0, 0.0, boolean0, 0.0, arrayList0, 2263, 0.0, 0.0, "GxYWo'n2Og?MJEl;", "GxYWo'n2Og?MJEl;", 0.0);
      uMeR0.removeUser(driver0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double((-165.1252), (-165.1252));
      boolean boolean0 = uMeR0.registerCompany("uMer.CustomProbabilisticDistribution", "uMer.CustomProbabilisticDistribution");
      assertTrue(boolean0);
      
      Van van0 = new Van("uMer.CustomProbabilisticDistribution", (-568.861791814), point2D_Double0, "uMer.CustomProbabilisticDistribution");
      boolean boolean1 = uMeR0.registerCompanyVehicle("uMer.CustomProbabilisticDistribution", van0);
      assertTrue(boolean1);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompanyVehicle("tZ=B6%b@[&E]DTGc9'x", (Vehicle) null);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertFalse(boolean0);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      HashMap<String, Client> hashMap0 = uMeR0.getClients();
      Client client0 = new Client("^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "/F=wQ)%A40 D", localDate0);
      hashMap0.put("^Dpn}Ql7ID ^F+", client0);
      uMeR0.setClients(hashMap0);
      boolean boolean0 = uMeR0.registerCompany("^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+");
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("", "");
      boolean boolean1 = uMeR0.registerCompany("", "");
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("J?[Vqx.", (-2074.59557120547), point2D_Double0, "\n---Clients---\n");
      boolean boolean0 = uMeR0.registerVehicleP(bike0);
      boolean boolean1 = uMeR0.registerVehicleP(bike0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1021L);
      Boolean boolean0 = new Boolean(false);
      Company company0 = new Company("F8V\"Q[$i<71", "Pr=UGAu+V");
      ArrayList<Trip> arrayList0 = company0.getTrips();
      Driver driver0 = new Driver("F8V\"Q[$i<71", (String) null, (String) null, "m2WtRhG", localDate0, 1021L, 1021L, boolean0, (-800.9), arrayList0, (-299530992), (-299530992), (-299530992), "V4:IA)Gcp", "V4:IA)Gcp", 4.0);
      boolean boolean1 = uMeR0.registerUser(driver0, (String) null);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertTrue(boolean1);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Client client0 = new Client("jl0}qJ8Lh.p", "jl0}qJ8Lh.p", "zNs", "jl0}qJ8Lh.p", localDate0);
      boolean boolean0 = uMeR0.registerUser(client0, "zNs");
      assertTrue(boolean0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("Driver \n", "Driver \n");
      assertTrue(boolean0);
      
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Client client0 = new Client("Driver \n", "Driver \n", "xfDddM", ")\nOwner : ", localDate0);
      boolean boolean1 = uMeR0.registerUser(client0, ")\nOwner : ");
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(boolean1);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      HashMap<String, Client> hashMap0 = uMeR0.getClients();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Client client0 = new Client("^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "/F=wQ)%A40 D", localDate0);
      hashMap0.put("^Dpn}Ql7ID ^F+", client0);
      uMeR0.setClients(hashMap0);
      boolean boolean0 = uMeR0.registerUser(client0, "^Dpn}Ql7ID ^F+");
      assertFalse(boolean0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      boolean boolean0 = uMeR0.registerCompany("Driver \n", "Driver \n");
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Driver driver0 = new Driver((String) null, "xfDddM", "\")y9xAlh#R", "Driver \n", localDate0, 1666.9319755796491, "A>6<&@V3n");
      boolean boolean1 = uMeR0.registerUser(driver0, "Driver \n");
      assertTrue(boolean1 == boolean0);
      
      HashMap<String, User> hashMap0 = uMeR0.allUsers();
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      HashMap<String, Client> hashMap0 = uMeR0.getClients();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Client client0 = new Client("^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "/F=wQ)%A40 D", localDate0);
      hashMap0.put("^Dpn}Ql7ID ^F+", client0);
      uMeR0.setClients(hashMap0);
      boolean boolean0 = uMeR0.registerCompany("F8V\"Q[$i<71", "2t<^-7h/tITfp)ih");
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getDates();
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Bike bike0 = new Bike("J?[Vqx.", (-2074.59557120547), point2D_Double0, "\n---Clients---\n");
      boolean boolean0 = uMeR0.registerVehicleP(bike0);
      assertTrue(boolean0);
      
      uMeR0.getAllVehicles();
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getAllVehicles();
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Company company0 = new Company("/F=wQ)%A40 D", "^Dpn}Ql7ID ^F+");
      HashMap<String, Vehicle> hashMap0 = company0.getVehicles();
      Point2D.Double point2D_Double0 = new Point2D.Double(2263, 2263);
      Bike bike0 = new Bike("admin", 2263, point2D_Double0, "*e{)ayX`:\"fHqHZ");
      hashMap0.put("/F=wQ)%A40 D", bike0);
      uMeR0.setVehiclesP(hashMap0);
      uMeR0.getVehiclesP();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getVehiclesP();
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      HashMap<String, Client> hashMap0 = new HashMap<String, Client>();
      Client client0 = new Client("^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "^Dpn}Ql7ID ^F+", "/F=wQ)%A40 D", localDate0);
      hashMap0.put("^Dpn}Ql7ID ^F+", client0);
      uMeR0.setClients(hashMap0);
      HashMap<String, Client> hashMap1 = uMeR0.getClients();
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(1, hashMap1.size());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      Driver driver0 = new Driver((String) null, "xfDddM", "\")y9xAlh#R", "Driver \n", localDate0, 1666.9319755796491, "A>6<&@V3n");
      boolean boolean0 = uMeR0.registerUser(driver0, "Driver \n");
      assertFalse(boolean0);
      
      HashMap<String, Driver> hashMap0 = uMeR0.getDriversP();
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      double double0 = uMeR0.getTotalDistance();
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setAllDrivers((HashMap<String, Driver>) null);
      // Undeclared exception!
      try { 
        uMeR0.getAllDrivers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setCurrent_user((String) null);
      uMeR0.getCurrent_user();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getCurrent_user();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      int int0 = uMeR0.getTripID();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      int int0 = uMeR0.getWeather();
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      double double0 = uMeR0.getTotalTime();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setWeather((-411563255));
      int int0 = uMeR0.getWeather();
      assertEquals((-411563255), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        UMeR.loadUMeR("fVl`!");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTotalDistance(0.0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      HashMap<String, Driver> hashMap0 = uMeR0.getDriversP();
      uMeR0.setDrivers(hashMap0);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getTeste();
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTrips((ArrayList<Trip>) null);
      // Undeclared exception!
      try { 
        uMeR0.getTrips();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.getCurrent_Class();
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTotalTime(0.0);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setTeste("j#H#<<&'L&0:GDg:m(`");
      uMeR0.getTeste();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      double double0 = uMeR0.getMoneyGenerated();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Helicopter helicopter0 = new Helicopter(">[\"%zu8RW/14NF", 0.0, point2D_Double0, ">[\"%zu8RW/14NF");
      uMeR0.removeVehicle(helicopter0);
      assertEquals(0, uMeR0.getWeather());
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      String string0 = uMeR0.toString();
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals("---Drivers---\n[]\n---Clients---\n[]\n---Vehicles---\n[]\n---Number of trips---\n0", string0);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0, uMeR0.getWeather());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      // Undeclared exception!
      try { 
        uMeR0.cancelTripQueue("vr2RW',i-yXbX~)j^!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uMer.UMeR", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UMeR uMeR0 = new UMeR();
      uMeR0.setCurrentClass(":J");
      assertEquals(0.0, uMeR0.getMoneyGenerated(), 0.01);
      assertEquals(0.0, uMeR0.getTotalDistance(), 0.01);
      assertEquals(0.0, uMeR0.getTotalTime(), 0.01);
      assertEquals(0, uMeR0.getTripID());
      assertEquals(0, uMeR0.getWeather());
  }
}
